name: Docker build, push and EKS deployment
on:
  #  push:
   workflow_dispatch:
    inputs:
      skip-image-push:
        type: boolean
        description: "Skip Image Build and Push"
        default: false
        required: false

env:
  AWS_REGION: "us-east-1"
  IMAGE_NAME: "case_study"
  EKS_CLUSTER: "demo"

jobs:
  docker:
    name: Build and Push
    runs-on: ubuntu-latest
    steps: 
      - name: Skipped Image build and push
        if: github.event.inputs.skip-image-push == 'true'
        run: echo " Skipped image build and push"
        
      - name: Checkout
        if: github.event.inputs.skip-image-push != 'true'
        uses: actions/checkout@v3
      

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        if: github.event.inputs.skip-image-push != 'true'
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build Image
        id: build-image
        if: github.event.inputs.skip-image-push != 'true'
        run:  docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG .

      - name: Tag Image
        id: tag-image
        if: github.event.inputs.skip-image-push != 'true'
        run: docker tag ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
      
      - name: Push Image
        id: push-image
        if: github.event.inputs.skip-image-push != 'true'
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
      
  eks:
    name: Kubectl Apply
    runs-on: ubuntu-latest
    needs: docker
    steps: 
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Config File
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update 
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region  ${{ env.AWS_REGION }}
          aws sts get-caller-identity
          aws eks get-token --region ${{ env.AWS_REGION }} --cluster-name ${{ env.EKS_CLUSTER }}
          
      - name: Install and configure kubectl
        run: |
          VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          curl https://storage.googleapis.com/kubernetes-release/release/$VERSION/bin/linux/amd64/kubectl \
              --progress-bar \
              --location \
              --remote-name
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
     
      - name: Kubectl
        run: kubectl apply -f deployment.yaml
        
